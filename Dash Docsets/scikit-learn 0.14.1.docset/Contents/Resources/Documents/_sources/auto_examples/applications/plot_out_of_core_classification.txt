

.. _example_applications_plot_out_of_core_classification.py:


======================================================
Out-of-core classification of text documents
======================================================

This is an example showing how scikit-learn can be used for classification
using an out-of-core approach: learning from data that doesn't fit into main
memory. We make use of an online classifier, i.e., one that supports the
partial_fit method, that will be fed with batches of examples. To guarantee
that the features space remains the same over time we leverage a
HashingVectorizer that will project each example into the same feature space.
This is especially useful in the case of text classification where new
features (words) may appear in each batch.

The dataset used in this example is Reuters-21578 as provided by the UCI ML
repository. It will be automatically downloaded and uncompressed on first run.

The plot represents the learning curve of the classifier: the evolution
of classification accuracy over the course of the mini-batches. Accuracy is
measured on the first 1000 samples, held out as a validation set.

To limit the memory consumption, we queue examples up to a fixed amount before
feeding them to the learner.



.. rst-class:: horizontal


    *

      .. image:: images/plot_out_of_core_classification_1.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_2.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_3.png
            :scale: 47

    *

      .. image:: images/plot_out_of_core_classification_4.png
            :scale: 47


**Script output**::

  downloading dataset (once and for all) into /Users/Epsilon/scikit_learn_data/reuters
  untarring Reuters dataset...
  done.
  Test set is 878 documents (108 positive)
    Passive-Aggressive classifier : 	   962 train docs (   132 positive)    878 test docs (   108 positive) accuracy: 0.946 in 1.15s (  834 docs/s)
            Perceptron classifier : 	   962 train docs (   132 positive)    878 test docs (   108 positive) accuracy: 0.938 in 1.16s (  830 docs/s)
                   SGD classifier : 	   962 train docs (   132 positive)    878 test docs (   108 positive) accuracy: 0.942 in 1.16s (  826 docs/s)
        NB Multinomial classifier : 	   962 train docs (   132 positive)    878 test docs (   108 positive) accuracy: 0.877 in 1.19s (  811 docs/s)
  
  
    Passive-Aggressive classifier : 	  3911 train docs (   517 positive)    878 test docs (   108 positive) accuracy: 0.936 in 3.25s ( 1202 docs/s)
            Perceptron classifier : 	  3911 train docs (   517 positive)    878 test docs (   108 positive) accuracy: 0.923 in 3.25s ( 1201 docs/s)
                   SGD classifier : 	  3911 train docs (   517 positive)    878 test docs (   108 positive) accuracy: 0.940 in 3.26s ( 1200 docs/s)
        NB Multinomial classifier : 	  3911 train docs (   517 positive)    878 test docs (   108 positive) accuracy: 0.885 in 3.27s ( 1194 docs/s)
  
  
    Passive-Aggressive classifier : 	  6821 train docs (   891 positive)    878 test docs (   108 positive) accuracy: 0.956 in 5.30s ( 1286 docs/s)
            Perceptron classifier : 	  6821 train docs (   891 positive)    878 test docs (   108 positive) accuracy: 0.940 in 5.30s ( 1285 docs/s)
                   SGD classifier : 	  6821 train docs (   891 positive)    878 test docs (   108 positive) accuracy: 0.941 in 5.31s ( 1285 docs/s)
        NB Multinomial classifier : 	  6821 train docs (   891 positive)    878 test docs (   108 positive) accuracy: 0.900 in 5.32s ( 1281 docs/s)
  
  
    Passive-Aggressive classifier : 	  9759 train docs (  1276 positive)    878 test docs (   108 positive) accuracy: 0.958 in 7.41s ( 1317 docs/s)
            Perceptron classifier : 	  9759 train docs (  1276 positive)    878 test docs (   108 positive) accuracy: 0.949 in 7.41s ( 1317 docs/s)
                   SGD classifier : 	  9759 train docs (  1276 positive)    878 test docs (   108 positive) accuracy: 0.960 in 7.41s ( 1316 docs/s)
        NB Multinomial classifier : 	  9759 train docs (  1276 positive)    878 test docs (   108 positive) accuracy: 0.909 in 7.43s ( 1313 docs/s)
  
  
    Passive-Aggressive classifier : 	 11680 train docs (  1499 positive)    878 test docs (   108 positive) accuracy: 0.941 in 9.17s ( 1274 docs/s)
            Perceptron classifier : 	 11680 train docs (  1499 positive)    878 test docs (   108 positive) accuracy: 0.916 in 9.17s ( 1273 docs/s)
                   SGD classifier : 	 11680 train docs (  1499 positive)    878 test docs (   108 positive) accuracy: 0.940 in 9.17s ( 1273 docs/s)
        NB Multinomial classifier : 	 11680 train docs (  1499 positive)    878 test docs (   108 positive) accuracy: 0.915 in 9.19s ( 1271 docs/s)
  
  
    Passive-Aggressive classifier : 	 14625 train docs (  1865 positive)    878 test docs (   108 positive) accuracy: 0.964 in 11.28s ( 1296 docs/s)
            Perceptron classifier : 	 14625 train docs (  1865 positive)    878 test docs (   108 positive) accuracy: 0.949 in 11.28s ( 1296 docs/s)
                   SGD classifier : 	 14625 train docs (  1865 positive)    878 test docs (   108 positive) accuracy: 0.962 in 11.29s ( 1295 docs/s)
        NB Multinomial classifier : 	 14625 train docs (  1865 positive)    878 test docs (   108 positive) accuracy: 0.925 in 11.30s ( 1294 docs/s)
  
  
    Passive-Aggressive classifier : 	 17360 train docs (  2179 positive)    878 test docs (   108 positive) accuracy: 0.949 in 13.15s ( 1320 docs/s)
            Perceptron classifier : 	 17360 train docs (  2179 positive)    878 test docs (   108 positive) accuracy: 0.941 in 13.15s ( 1320 docs/s)
                   SGD classifier : 	 17360 train docs (  2179 positive)    878 test docs (   108 positive) accuracy: 0.954 in 13.15s ( 1319 docs/s)
        NB Multinomial classifier : 	 17360 train docs (  2179 positive)    878 test docs (   108 positive) accuracy: 0.932 in 13.17s ( 1318 docs/s)



**Python source code:** :download:`plot_out_of_core_classification.py <plot_out_of_core_classification.py>`

.. literalinclude:: plot_out_of_core_classification.py
    :lines: 25-

**Total running time of the example:**  41.93 seconds 
( 0 minutes  41.93 seconds)
    